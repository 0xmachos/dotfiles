# ~/.shh/config
# ssh_config(5)
# https://man.openbsd.org/ssh_config

# https://stribika.github.io/2015/01/04/secure-secure-shell.html 

Include ~/.ssh/.extra_ssh
# Configuration values are only changed the first time they are set.
# Host-specific definitions should be at the beginning and defaults at the end.

Host github.com
     User 0xmachos
     IdentityAgent ~/Library/Containers/com.maxgoedjen.Secretive.SecretAgent/Data/socket.ssh
     IdentityFile ~/.ssh/id_ecdsa-sha2-nistp256_github.pub

Host *

    IdentityAgent ~/Library/Containers/com.maxgoedjen.Secretive.SecretAgent/Data/socket.ssh
    IdentitiesOnly yes
    VisualHostKey yes
    PubkeyAuthentication yes
    HashKnownHosts yes
    # ssh-keygen -R hostname

    UseRoaming no
    # CVE-2016-0777

    UseKeychain yes
    # Tell the system to search for key passphrases in the user's keychain 
    # When passphrase is provided and is correct store it in the keychain
    # https://developer.apple.com/library/content/technotes/tn2449/_index.html

    ForwardAgent no
    # Do not allow the connection to the authentication agent to be forwarded to the remote machine
    # http://www.unixwiz.net/techtips/ssh-agent-forwarding.html#fwd

    # Cryptography

    # For values that end with @openssh.com these are algorithms defined by OpenSSH that 
    #  deviate in some way to the published SSH protocol or algorithm RFC
    #  See: https://security.stackexchange.com/a/231117
    #  See: https://www.rfc-editor.org/rfc/rfc4251#section-6
    #  See: https://github.com/openssh/openssh-portable/blob/V_8_2/PROTOCOL

    KexAlgorithms curve25519-sha256@libssh.org
    # Only use ECDH over curve25519
    # https://datatracker.ietf.org/doc/html/rfc8731
    
    HostKeyAlgorithms ecdsa-sha2-nistp256,ssh-ed25519
    # Allow only ed25519 or ECDSA keys for client authentication
    # ECDSA for Secretive/ Secure Enclave generated keys
    # ed25519 for everything else

    Ciphers chacha20-poly1305@openssh.com
    # Only use chacha20-poly1305
    # Chacha20-poly1305 is preferred over AES-GCM because the SSH protocol does 
    #   not encrypt message sizes when GCM (or EtM) is in use. 
    #   This allows some traffic analysis even without decrypting the data.
    #   See: http://blog.djm.net.au/2013/11/chacha20-and-poly1305-in-openssh.html
    # chacha20-poly1305@openssh.com offers both encryption and authentication. 
    #  As such, no separate MAC is required. If the chacha20-poly1305@openssh.com 
    #  cipher is selected in key exchange the offered MAC algorithms are ignored 
    #  and no MAC is required to be negotiated.
    #  See: https://github.com/openssh/openssh-portable/blob/V_8_2/PROTOCOL.chacha20poly1305

    MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com
    # Only use encrypt then MAC (etm) MACs
    # Allow only HMAC-SHA2-512/256 or UMAC-128
    #   https://crypto.stackexchange.com/a/56432 
    # If chacha20-poly1305 is the cipher in use these offered MACs are ignored
    # Included incase I add another cipher, other than chacha20-poly1305, above to connect
    #  to a system that does not support chacha20-poly1305


