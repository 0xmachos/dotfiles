#!/usr/bin/env bash
# ~/.bash_prompt

# Based on: https://github.com/jessfraz/dotfiles/blob/master/.bash_prompt

# Define colours
# Solarized colors, taken from http://git.io/solarized-colors
tput sgr0; 
# reset colors

bold=$(tput bold);
reset=$(tput sgr0);
blue=$(tput setaf 33);
green=$(tput setaf 64);
white=$(tput setaf 15);
orange=$(tput setaf 166);
yellow=$(tput setaf 136);
violet=$(tput setaf 61);
red=$(tput setaf 1);


prompt_git() {
  local s='';
  local branchName='';

  # Check if the current directory is in a Git repository.
  if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      if [[ -O "$(git rev-parse --show-toplevel)/.git/index" ]]; then
        git update-index --really-refresh -q &> /dev/null;
      fi;

      # Check for uncommitted changes in the index.
      if ! git diff-index HEAD --quiet; then
        s+='+';
      fi;

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+='?';
      fi;

    fi;

    # Get the short symbolic ref.
    # If HEAD isn‚Äôt a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')";

    [ -n "${s}" ] && s=" [${s}]";

    echo -e "${1}${branchName}${blue}${s}";
  else
    return;
  fi;
}

user_style=""
host_style="${orange}"
enviroment_style=""

if [[ "${USER}" == "root" ]]; then
  user_style="${red}";
else
  user_style="${blue}";
fi

if [[ "${OS}" == "Darwin" ]]; then
  host_style+="üçé"

elif [[ "${OS}" == "Linux" ]]; then
  host_style+="üêß"
fi 


if [[ "${OS}" == "Linux" ]]; then
  # If Linux try some stuff

  if [[ -x "$(command -v systemd-detect-virt)" ]]; then
    # Linux vm check 
    if [[ "$(systemd-detect-virt)" == "vmware" ]]; then 
    enviroment_style+="üì¶"
    # Add a box when running on VMWare
    fi
  fi

  if [[ -f "/proc/device-tree/model" ]]; then
    # Check if host is a Raspberry Pi
    if grep -q 'Raspberry Pi' "/proc/device-tree/model"; then
    enviroment_style+="ü•ß"
    # Add a pi when running on a Raspberry Pi
    fi
  fi
fi


if [[ "${OS}" == "Darwin" ]]; then
  # If macOS try some stuff

  if [[ -x "$(command -v kextstat)" ]]; then
    if kextstat | grep -q 'com.vmware.kext.VMwareGfx' || kextstat | grep -q 'com.vmware.kext.vmhgfs'; then 
      # macOS vmware check
      enviroment_style+="üì¶"
      # Add a box when running on VMWare
    fi
  fi
fi


if [[ "${SSH_TTY}" ]]; then
  enviroment_style+="‚òÅÔ∏è "
  # Add a cloud when connected via SSH.
fi

# build the prompt

PS1="\\[\\033]0;\\007\\]"; 
# Fuck knows
PS1+="\\[${user_style}\\]\\u${reset}"; 
# Username
PS1+="\\[${white}\\] on ${host_style}\\h${enviroment_style}";
# "on "
PS1+="\\[${white}\\] in ";
# "in"
PS1+="\\[${bold}${green}\\]\\w${reset}"; 
# Working directory
PS1+="\$(prompt_git \"${white} on ${violet}\")"; 
# Git repository details
PS1+="\\n";
# New line
PS1+="\\[${white}\\]\\$ \\[${reset}\\]"; 
# "$" (and reset color)
export PS1;

PS2="\\[${yellow}\\]‚Üí \\[${reset}\\]";
export PS2;
