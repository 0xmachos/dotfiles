#!/usr/bin/env bash
# ~/.bash_prompt

# Based on: https://github.com/jessfraz/dotfiles/blob/master/.bash_prompt

# Define colours
# Solarized colors, taken from http://git.io/solarized-colors
tput sgr0; 
# reset colors

readonly BOLD=$(tput bold)
readonly RESET=$(tput sgr0)
readonly BLUE=$(tput setaf 33)
readonly GREEN=$(tput setaf 64)
readonly WHITE=$(tput setaf 15)
readonly ORANGE=$(tput setaf 166)
readonly YELLOW=$(tput setaf 136)
readonly VIOLET=$(tput setaf 61)
readonly RED=$(tput setaf 1)

### END Colours ###


function detect_user {

  if [[ "${USER}" == "root" ]]; then
    user_style="${RED}";
  else
    user_style="${BLUE}";
  fi
}


function detect_enviroment {

  if [[ "${OS}" == "Darwin" ]]; then
    host_style+="🍎"

  elif [[ "${OS}" == "Linux" ]]; then
    host_style+="🐧"
  fi 

  if [[ "${OS}" == "Linux" ]]; then
    # If Linux try some stuff

    if [[ -x "$(command -v systemd-detect-virt)" ]]; then
      # Linux vm check 
      if [[ "$(systemd-detect-virt)" == "vmware" ]]; then 
      enviroment_style+="📦"
      # Add a box when running on VMWare
      fi
    fi

    if [[ -f "/proc/device-tree/model" ]]; then
      # Check if host is a Raspberry Pi
      if grep -q 'Raspberry Pi' "/proc/device-tree/model"; then
      enviroment_style+="🥧"
      # Add a pi when running on a Raspberry Pi
      fi
    fi
  fi


  if [[ "${OS}" == "Darwin" ]]; then
    # If macOS try some stuff

    if [[ -x "$(command -v kextstat)" ]]; then
      if kextstat | grep -q 'com.vmware.kext.VMwareGfx' || kextstat | grep -q 'com.vmware.kext.vmhgfs'; then 
        # macOS vmware check
        enviroment_style+="📦"
        # Add a box when running on VMWare
      fi
    fi
  fi

  if [[ "${SSH_TTY}" ]]; then
    enviroment_style+="☁️ "
    # Add a cloud when connected via SSH.
  fi
}


function prompt_git {
  local s='';
  local branchName='';

  # Check if the current directory is in a Git repository.
  if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      if [[ -O "$(git rev-parse --show-toplevel)/.git/index" ]]; then
        git update-index --really-refresh -q &> /dev/null;
      fi;

      # Check for uncommitted changes in the index.
      if ! git diff-index HEAD --quiet; then
        s+='+';
      fi;

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+='?';
      fi;

    fi;

    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')";

    [ -n "${s}" ] && s=" [${s}]";

    echo -e "${1}${branchName}${BLUE}${s}";
  else
    return;
  fi;
}


function build_prompt {
  # build the prompt

  PS1="\\[\\033]0;\\007\\]"; 
  # Fuck knows
  PS1+="\\[${user_style}\\]\\u${RESET}"; 
  # Username
  PS1+="\\[${WHITE}\\] on ${host_style}\\h${enviroment_style}";
  # "on "
  PS1+="\\[${WHITE}\\] in ";
  # "in"
  PS1+="\\[${BOLD}${GREEN}\\]\\w${RESET}"; 
  # Working directory

  if [[ "${OS}" == Darwin ]]; then
    if xcode-select -p >/dev/null 2>&1; then
      PS1+="\$(prompt_git \"${WHITE} on ${VIOLET}\")"; 
      # Git repository details
    fi
  else 
    if [ -x "$(command -v git)" ]; then
      PS1+="\$(prompt_git \"${WHITE} on ${VIOLET}\")"; 
      # Git repository details
    fi
  fi
  
  PS1+="\\n";
  # New line
  PS1+="\\[${WHITE}\\]\\$ \\[${RESET}\\]"; 
  # "$" (and reset color)
  export PS1;

  PS2="\\[${YELLOW}\\]→ \\[${RESET}\\]";
  export PS2;
}


function main {

  user_style=""
  host_style="${ORANGE}"
  enviroment_style=""

  detect_user
  detect_enviroment
  build_prompt

}

main "$@"

